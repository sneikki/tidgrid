/*
 * variant.scss
 */

@use "sass:selector";
@use "sass:map";
@use "util/string";
@use "namespace";

$default-breakpoints: (
  xs: 36em, /* = 576 px */
  sm: 48em, /* = 768 px */
  md: 64em, /* = 1024 px */
  lg: 75em, /* = 1200 px */
  xl: 90em, /* = 1440 px */
) !default;

@mixin for-breakpoints($breakpoints: $default-breakpoints) {
  @each $key, $value in $breakpoints {
    @content($key, $value);
  }
}

@mixin use-breakpoint($name, $breakpoints: $default-breakpoints) {
  $value: map.get($breakpoints, $name);

  @media only screen and (min-width: $value) {
    @content;
  }
}

@mixin use-breakpoints($breakpoints: $default-breakpoints) {
  @include for-breakpoints($breakpoints) using ($name, $value) {
    @media only screen and (min-width: $value) {
      @content($value);
    }
  }
}

@mixin generate($breakpoints: $default-breakpoints, $with: null) {
  $breakpoint: null !global;
  $declare-with: $with !global;
  @content;

  @each $key, $value in $breakpoints {
    @media only screen and (min-width: $value) {
      $breakpoint: $key !global;
      @content;
    }
  }
}

@mixin declare($property, $value) {
  $name: namespace.get-name($property, $value);
  $classname: $name;

  @if $breakpoint {
    $classname: #{$breakpoint}\:#{$name};
  }

  $selector: ".#{$classname}";

//   @if & {
//     $selector: "&.#{$classname}";
//   }

  @if $declare-with {
    $selector: ".#{$declare-with}#{$selector}";
  }

  #{$selector} {
    @content;
  }
}
